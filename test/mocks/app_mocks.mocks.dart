// Mocks generated by Mockito 5.1.0 from annotations
// in news_app/test/mocks/app_mocks.dart.
// Do not manually edit this file.

import 'dart:async' as _i8;

import 'package:bloc/bloc.dart' as _i10;
import 'package:dartz/dartz.dart' as _i2;
import 'package:dio/dio.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:news_app/application/news/news_bloc.dart' as _i5;
import 'package:news_app/appsetup/dio/dio_client.dart' as _i9;
import 'package:news_app/infrastructure/core/failure.dart' as _i7;
import 'package:news_app/infrastructure/news/entities/news_enties.dart' as _i6;
import 'package:news_app/infrastructure/news/news_api.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

class _FakeDio_1 extends _i1.Fake implements _i3.Dio {}

class _FakeNewsRepository_2 extends _i1.Fake implements _i4.NewsRepository {}

class _FakeNewsState_3 extends _i1.Fake implements _i5.NewsState {}

class _Fake$NewsCopyWith_4<$Res> extends _i1.Fake
    implements _i6.$NewsCopyWith<$Res> {}

class _FakeFailureType_5 extends _i1.Fake implements _i7.FailureType {}

/// A class which mocks [NewsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockNewsRepository extends _i1.Mock implements _i4.NewsRepository {
  MockNewsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i2.Either<_i7.Failure, _i6.News>> getNews() =>
      (super.noSuchMethod(Invocation.method(#getNews, []),
              returnValue: Future<_i2.Either<_i7.Failure, _i6.News>>.value(
                  _FakeEither_0<_i7.Failure, _i6.News>()))
          as _i8.Future<_i2.Either<_i7.Failure, _i6.News>>);
}

/// A class which mocks [DioClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockDioClient extends _i1.Mock implements _i9.DioClient {
  MockDioClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Dio dioClient() => (super.noSuchMethod(Invocation.method(#dioClient, []),
      returnValue: _FakeDio_1()) as _i3.Dio);
}

/// A class which mocks [NewsBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockNewsBloc extends _i1.Mock implements _i5.NewsBloc {
  MockNewsBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.NewsRepository get newsRepository =>
      (super.noSuchMethod(Invocation.getter(#newsRepository),
          returnValue: _FakeNewsRepository_2()) as _i4.NewsRepository);
  @override
  set newsRepository(_i4.NewsRepository? _newsRepository) =>
      super.noSuchMethod(Invocation.setter(#newsRepository, _newsRepository),
          returnValueForMissingStub: null);
  @override
  _i5.NewsState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeNewsState_3()) as _i5.NewsState);
  @override
  _i8.Stream<_i5.NewsState> get stream => (super.noSuchMethod(
      Invocation.getter(#stream),
      returnValue: Stream<_i5.NewsState>.empty()) as _i8.Stream<_i5.NewsState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i5.NewsEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i5.NewsEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i5.NewsState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i5.NewsEvent>(_i10.EventHandler<E, _i5.NewsState>? handler,
          {_i10.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i10.Transition<_i5.NewsEvent, _i5.NewsState>? transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i8.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i8.Future<void>);
  @override
  void onChange(_i10.Change<_i5.NewsState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [News].
///
/// See the documentation for Mockito's code generation for more information.
class MockNews extends _i1.Mock implements _i6.News {
  MockNews() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get status =>
      (super.noSuchMethod(Invocation.getter(#status), returnValue: '')
          as String);
  @override
  num get totalResults =>
      (super.noSuchMethod(Invocation.getter(#totalResults), returnValue: 0)
          as num);
  @override
  List<_i6.Articles> get articles =>
      (super.noSuchMethod(Invocation.getter(#articles),
          returnValue: <_i6.Articles>[]) as List<_i6.Articles>);
  @override
  _i6.$NewsCopyWith<_i6.News> get copyWith =>
      (super.noSuchMethod(Invocation.getter(#copyWith),
              returnValue: _Fake$NewsCopyWith_4<_i6.News>())
          as _i6.$NewsCopyWith<_i6.News>);
  @override
  Map<String, dynamic> toJson() =>
      (super.noSuchMethod(Invocation.method(#toJson, []),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
}

/// A class which mocks [Failure].
///
/// See the documentation for Mockito's code generation for more information.
class MockFailure extends _i1.Mock implements _i7.Failure {
  MockFailure() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get reason =>
      (super.noSuchMethod(Invocation.getter(#reason), returnValue: '')
          as String);
  @override
  _i7.FailureType get type => (super.noSuchMethod(Invocation.getter(#type),
      returnValue: _FakeFailureType_5()) as _i7.FailureType);
}
